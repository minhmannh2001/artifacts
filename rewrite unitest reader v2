package reader

import (
	"bytes"
	"encoding/binary"
	"io"
	"strings"
	"testing"
)

func TestAdaptiveReader_RegularData(t *testing.T) {
	tests := []struct {
		name     string
		input    string
		readSize int
		want     string
		wantErr  error
	}{
		{
			name:     "read regular data smaller than header size",
			input:    "hello",
			readSize: 10,
			want:     "hello",
			wantErr:  nil,
		},
		{
			name:     "read regular data exactly header size",
			input:    "12345678",
			readSize: 10,
			want:     "12345678",
			wantErr:  nil,
		},
		{
			name:     "read regular data larger than header size",
			input:    "this is a long string that is definitely longer than the header size",
			readSize: 100,
			want:     "this is a long string that is definitely longer than the header size",
			wantErr:  nil,
		},
		{
			name:     "read large data in small chunks",
			input:    "this is a test of reading data",
			readSize: 7,
			want:     "this is",
			wantErr:  nil,
		},
		{
			name:     "empty input",
			input:    "",
			readSize: 5,
			want:     "",
			wantErr:  io.EOF,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader := NewAdaptiveReader(strings.NewReader(tt.input))
			got := make([]byte, tt.readSize)
			n, err := reader.Read(got)

			if err != tt.wantErr {
				t.Errorf("Read() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if err == nil {
				if n != len(tt.want) {
					t.Errorf("Read() n = %v, want %v", n, len(tt.want))
				}
				if !bytes.Equal(got[:n], []byte(tt.want)) {
					t.Errorf("Read() = %q, want %q", got[:n], tt.want)
				}

				// For large inputs, verify we can read the rest
				if len(tt.input) > n {
					remaining := make([]byte, len(tt.input)-n)
					totalRead := n

					for totalRead < len(tt.input) {
						m, err := reader.Read(remaining)
						if err != nil && err != io.EOF {
							t.Errorf("Failed to read remaining data: %v", err)
							break
						}
						totalRead += m
						if err == io.EOF {
							break
						}
					}

					if totalRead != len(tt.input) {
						t.Errorf("Failed to read complete input: got %v bytes, want %v bytes", totalRead, len(tt.input))
					}
				}
			}
		})
	}
}

func TestAdaptiveReader_ReadExactly(t *testing.T) {
	t.Run("read large data exactly", func(t *testing.T) {
		input := "this is a test of reading data exactly"
		reader := NewAdaptiveReader(strings.NewReader(input))
		got := make([]byte, len(input))
		
		n, err := io.ReadFull(reader, got)
		if err != nil {
			t.Errorf("ReadFull() error = %v", err)
		}
		if n != len(input) {
			t.Errorf("ReadFull() n = %v, want %v", n, len(input))
		}
		if !bytes.Equal(got, []byte(input)) {
			t.Errorf("ReadFull() = %q, want %q", got, input)
		}
	})
}

func TestAdaptiveReader_LargeReads(t *testing.T) {
	// Generate a large input string
	largeInput := strings.Repeat("abcdefghijklmnopqrstuvwxyz", 1000) // 26KB of data

	tests := []struct {
		name     string
		readSize int
	}{
		{"read in 1KB chunks", 1024},
		{"read in 4KB chunks", 4096},
		{"read in 8KB chunks", 8192},
		{"read entire data at once", len(largeInput)},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			reader := NewAdaptiveReader(strings.NewReader(largeInput))
			totalRead := 0
			buffer := make([]byte, tt.readSize)
			
			for totalRead < len(largeInput) {
				n, err := reader.Read(buffer)
				if err != nil && err != io.EOF {
					t.Errorf("Read() error = %v", err)
					break
				}
				
				if !bytes.Equal(buffer[:n], []byte(largeInput[totalRead:totalRead+n])) {
					t.Errorf("Read data mismatch at offset %d", totalRead)
					break
				}
				
				totalRead += n
				if err == io.EOF {
					break
				}
			}

			if totalRead != len(largeInput) {
				t.Errorf("Total bytes read = %v, want %v", totalRead, len(largeInput))
			}
		})
	}
}

// Keeping the existing Docker stream and multiple reads tests...
// [Previous Docker stream and multiple reads test cases remain unchanged]