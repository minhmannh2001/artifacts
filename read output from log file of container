I'll help you modify the `Run` method in `container.go` to read new log lines from the container's log file. Here's how we can modify it:

```go
func (c *Container) Run(name string, context string, args map[string]interface{}, requestID string, taskID string, outputCh chan output.Output) error {
    taskLog := logz.With(zap.String("RequestID", requestID), zap.String("task-id", taskID))

    if c.Status != 0 {
        if err := c.recreateAndInitializeContainer(context, taskLog); err != nil {
            return err
        }

        // Create output file path in container
        outputFile := fmt.Sprintf("/tmp/output_%s.txt", c.ID)
        
        // Redirect command output to file
        if _, err := c.Stdin.Write([]byte(fmt.Sprintf("%s > %s 2>&1\n", context, outputFile))); err != nil {
            taskLog.Warn(fmt.Sprintf("Error writing command to container: %v", err))
            _ = c.StopContainer()
            return err
        }

        // Process the output from the container's log file
        outputResult := c.processContainerOutputFromFile(taskLog, context, args, outputFile)

        // Send output through the channel
        c.sendOutput(name, taskID, requestID, args, outputResult, taskLog, outputCh)

        // Log final result
        c.logFinalResult(context, outputResult, taskLog)
    }

    // Ready
    c.Status = 1
    c.ChangeTime = time.Now().Unix()

    return nil
}

func (c *Container) processContainerOutputFromFile(taskLog *zap.Logger, context string, args map[string]interface{}, outputFile string) interface{} {
    var outputResult interface{}
    taskInfo := parseTaskInfo(context)
    playbookDebugged := taskInfo.GetKey("args").GetKey("headers").GetBoolOrDefault(viper.GetString("worker.debugKey"), true)

    taskLog.Info("Run container ", zap.Any("name", c.Name), zap.Any("task context", taskInfo), zap.Any("args", args))

    // Create local file to store container output
    localFile := fmt.Sprintf("/tmp/local_%s.txt", c.ID)
    defer os.Remove(localFile) // Clean up local file

    // Wait for container to finish writing output
    time.Sleep(1 * time.Second)

    // Copy output file from container
    cmd := exec.Command("docker", "cp", fmt.Sprintf("%s:%s", c.ID, outputFile), localFile)
    if err := cmd.Run(); err != nil {
        taskLog.Error(fmt.Sprintf("Error copying output file: %v", err))
        return createErrorOutput(&OutputContainer{
            Type:       "error",
            ErrMessage: fmt.Sprintf("Failed to copy output file: %v", err),
        })
    }

    // Read the output file
    file, err := os.Open(localFile)
    if err != nil {
        taskLog.Error(fmt.Sprintf("Error opening output file: %v", err))
        return createErrorOutput(&OutputContainer{
            Type:       "error",
            ErrMessage: fmt.Sprintf("Failed to open output file: %v", err),
        })
    }
    defer file.Close()

    // Read file line by line
    scanner := bufio.NewScanner(file)
    for scanner.Scan() {
        line := scanner.Text()
        taskLog.Debug("Container output line: ", zap.String("line", line))

        outputContainer, err := parseOutputContainer(line, taskLog)
        if err != nil {
            continue
        }

        switch outputContainer.Type {
        case "result":
            outputResult = createResultOutput(outputContainer)
        case "log":
            c.handleLogOutput(outputContainer, taskInfo, playbookDebugged, taskLog)
        case "exception", "error":
            taskLog.Error(fmt.Sprintf("[Error running container]: %s", outputContainer.Message))
            outputResult = createErrorOutput(outputContainer)
        case "ignored_exception":
            taskLog.Error("[Ignored exception]", zap.Any("Error:", outputContainer.Message))
            outputResult = createResultOutput(outputContainer)
        case "pending":
            taskLog.Error("[Pending]", zap.Any("Pending:", outputContainer.Results))
            outputResult = createPendingOutput(outputContainer)
        case "completed":
            return outputResult
        default:
            outputResult = createUnknownOutput(outputContainer)
        }
    }

    if err := scanner.Err(); err != nil {
        taskLog.Error(fmt.Sprintf("Error reading output file: %v", err))
        return createErrorOutput(&OutputContainer{
            Type:       "error",
            ErrMessage: fmt.Sprintf("Failed to read output file: %v", err),
        })
    }

    return outputResult
}
```

Key changes made:

1. **Output Redirection**:
```go
outputFile := fmt.Sprintf("/tmp/output_%s.txt", c.ID)
if _, err := c.Stdin.Write([]byte(fmt.Sprintf("%s > %s 2>&1\n", context, outputFile))); err != nil {
    // Handle error
}
```

2. **File-based Output Processing**:
```go
func (c *Container) processContainerOutputFromFile(taskLog *zap.Logger, context string, args map[string]interface{}, outputFile string) interface{} {
    // Create local file
    localFile := fmt.Sprintf("/tmp/local_%s.txt", c.ID)
    defer os.Remove(localFile)

    // Copy from container
    cmd := exec.Command("docker", "cp", fmt.Sprintf("%s:%s", c.ID, outputFile), localFile)
    // ...
}
```

3. **File Reading**:
```go
scanner := bufio.NewScanner(file)
for scanner.Scan() {
    line := scanner.Text()
    // Process each line
}
```

4. **Cleanup**:
```go
defer os.Remove(localFile) // Clean up local file
defer file.Close()
```

Benefits of this approach:
1. More reliable output capture
2. Better error handling
3. Cleaner output processing
4. No need to maintain stdout scanner
5. Easier to debug (output file can be inspected)

The main differences from the original implementation:
1. Uses file-based output instead of direct stdout reading
2. Copies output file from container to host
3. Processes output from file instead of stream
4. Better cleanup of resources
5. More robust error handling

Would you like me to explain any part in more detail or make additional modifications?
